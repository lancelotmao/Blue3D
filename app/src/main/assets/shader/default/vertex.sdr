attribute vec4 aPosition;
attribute vec2 aTexcoord;
attribute vec3 aNormal;
attribute vec4 aIndex;
attribute vec4 aWeight;

uniform mat3 matNormal;
uniform mat4 matWorld;
uniform mat4 matEye;
uniform mat4 matProjection;
uniform mat4 matLightProjection;
uniform mat4 matLightView;

uniform vec3 uEyePosition;

uniform int iBoneEnabled;
uniform mat4 matBindShape;
uniform mat4 matBone[48];

uniform int iLightingEnabled;
uniform int iAttenuationEnabled;
uniform int light_two_sided;
uniform vec4 uAmbientLight;
uniform int uLightCount;
uniform int uIsLightPosFixed;
uniform vec4 uLightPos[4];
uniform vec4 uLightColor[4];
uniform vec4 uMaterialAmbient;
uniform vec4 uMaterialDiffuse;
uniform vec4 uMaterialSpec;
uniform float uShininess;
uniform int uDoubleSided;

varying vec4 lightResult;
varying vec2 texcoords;
varying float vDensity;
varying vec4 vLCPos;

void main() {
	gl_PointSize = 5.0;
    texcoords = vec2(aTexcoord.s, 1.0 - aTexcoord.t);
    
    vec4 pos = aPosition;
    vec3 normal = normalize(aNormal);
    if (iBoneEnabled != 0)
    {
        vec4 posBindShape = matBindShape * aPosition;
        vec3 normalBindShape = mat3(matBindShape) * normal;
        
        int index = int(aIndex.x);
        vec4 boneSpacePos = (matBone[index] * posBindShape) * aWeight.x;
        mat3 mn = mat3(matBone[index]);
        vec3 boneSpaceNormal = (mn * normalBindShape) * aWeight.x;
        
        if (aWeight.y > 0.01)
        {
        	index = int(aIndex.y);
	        boneSpacePos += (matBone[index] * posBindShape) * aWeight.y;
	        mn = mat3(matBone[index]);
	        boneSpaceNormal += (mn * normalBindShape) * aWeight.y;
	    }
        
        if (aWeight.z > 0.01)
        {
        	index = int(aIndex.z);
	        boneSpacePos += (matBone[index] * posBindShape) * aWeight.z;
	        mn = mat3(matBone[index]);
	        boneSpaceNormal += (mn * normalBindShape) * aWeight.z;
	    }
        
        if (aWeight.w > 0.01)
        {
        	index = int(aIndex.w);
	        boneSpacePos += (matBone[index] * posBindShape) * aWeight.w;
	        mn = mat3(matBone[index]);
	        boneSpaceNormal += (mn * normalBindShape) * aWeight.w;
	    }
        
    	pos = vec4(boneSpacePos.xyz, 1.0);
        normal = boneSpaceNormal;
    }
    
    // transform position and normal to world
    pos = matWorld * pos;
    normal = normalize(matNormal * normalize(normal));

    vLCPos = matLightProjection * matLightView * vec4(pos.xyz, 1.0);
    
    if (iLightingEnabled != 0)
    {
        vDensity = 0.0;
        lightResult = uAmbientLight * uMaterialAmbient;
        for (int i = 0;i < uLightCount;++i)
        {
            vec4 posInLightSpace = uIsLightPosFixed == 0 ? pos : matEye * pos;
            vec3 normalInLightSpace = uIsLightPosFixed == 0 ? normal : mat3(matEye) * normal;
            vec3 lv = normalize(uLightPos[i].w == 0.0 ? uLightPos[i].xyz : (uLightPos[i].xyz - posInLightSpace.xyz));
            
            float atten = (iAttenuationEnabled == 0) ? 1.0 : 1.0 / length(uLightPos[i].xyz - posInLightSpace.xyz);
            float density = 1.0;
            if (uDoubleSided != 0)
            {
            	density = abs(dot(normalInLightSpace, lv));
            }
            else
            {
                density = clamp(dot(normalInLightSpace, lv), 0.0, 1.0);
			}
            vDensity += density * atten;
            lightResult += vec4(uMaterialDiffuse.xyz * uLightColor[i].xyz * density, uMaterialDiffuse.w) * atten;
            
            // specular light
            if (uMaterialSpec.w > 0.01 && density > 0.0)
            {
                float specPower = 0.0;
                vec3 camVec = normalize(uEyePosition - posInLightSpace.xyz);
                specPower = pow(max(0.0, dot(reflect(-lv, normalInLightSpace), camVec)), uShininess);
                lightResult += vec4(uMaterialSpec.xyz * normalize(uLightColor[i].xyz) * specPower, uMaterialSpec.w);
            }
        }
        lightResult = clamp(lightResult, 0.0, 1.0);
    }
    else
    {
    	lightResult = uMaterialDiffuse;
        vDensity = 1.0;
    }
    
    vec4 outPos = matProjection * matEye * pos;
    //outPos.z = outPos.z * outPos.w;
    gl_Position = outPos;
}