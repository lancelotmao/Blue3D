precision highp float;

uniform sampler2D tex;
uniform vec2 uTexScroll;
// 0 No Texture; 1 Combine; 2 Replace; 3 Modulate
uniform int uTextureMode;

// shadow uniforms
uniform int uShadowEnabled;
uniform sampler2D texShadowMap;
uniform float width;
uniform float height;
uniform float uShadowFactor;
uniform int uIsOccluder;
// accepted value is 1, 4, 16
uniform int uShadowMappingAASampleRate;

// lighting
uniform int iLightingEnabled;
uniform int iAttenuationEnabled;
uniform int light_two_sided;
uniform vec4 uAmbientLight;
uniform int uLightCount;
uniform vec4 uLightPos[4];
uniform vec4 uLightColor[4];
uniform vec4 uMaterialAmbient;
uniform vec4 uMaterialDiffuse;
uniform vec4 uMaterialSpec;
uniform float uShininess;
uniform int uDoubleSided;
uniform vec3 uEyePosition;

varying vec2 texcoords;
varying vec4 vLCPos;
varying vec4 vPos;
varying vec3 vNormal;

void main() {
	int count = 0;
	int shadowAASampleRate = uShadowMappingAASampleRate;
	
	if (uShadowEnabled != 0)
	{
	    float invW = 1.0 / width;
	    float invH = 1.0 / height;
	    
	    vec4 normalizedLCPos = vLCPos / vLCPos.w;
	    float LCZ = normalizedLCPos.z;
	    vec2 shadowCoord = (normalizedLCPos.st + 1.0) / 2.0;
	    
	    vec4 shadowTexColor = texture2D(texShadowMap, shadowCoord.st);
	    if (shadowTexColor.s > 0.0 && shadowTexColor.s < 1.0
	        && shadowTexColor.t > 0.0 && shadowTexColor.t < 1.0)
	    {
	        if(uIsOccluder != 0)
	        {
	            // for occluder, avoid z fighting by loosing condition
	            LCZ -= 0.01;
	        }
	        
	        if (uShadowMappingAASampleRate == 16)
	        {
	            for (int i = 0;i < 4;++i)
	            {
	                for (int j = 0;j < 4;++j)
	                {
	                    vec4 stc = texture2D(texShadowMap,
	                            vec2(shadowCoord.s + (-1.5+float(i)) * invW, shadowCoord.t + (-1.5+float(j)) * invH));
	    
	                    if (LCZ > stc.r)
	                    {
	                        count++;
	                    }
	                }
	            }
	        }
	        else if (uShadowMappingAASampleRate == 4)
	        {
	            for (int i = 0;i < 2;++i)
	            {
	                for (int j = 0;j < 2;++j)
	                {
	                    vec4 stc = texture2D(texShadowMap,
	                            vec2(shadowCoord.s + (-0.5+float(i)) * invW, shadowCoord.t + (-0.5+float(j)) * invH));
	    
	                    if (LCZ > stc.r)
	                    {
	                        count++;
	                    }
	                }
	            }
	        }
	        else
	        {
	            shadowAASampleRate = 1;
	            vec4 stc = texture2D(texShadowMap, shadowCoord.st);
	            if (LCZ > stc.r)
	            {
	                count++;
	            }
	        }
	    }
	}
    
    // flip Y
    vec2 tc = texcoords + uTexScroll;
    
    float vDensity = 0.0;
    vec4 lightResult = vec4(0.0, 0.0, 0.0, 0.0);
    if (iLightingEnabled != 0)
    {
        lightResult = uAmbientLight * uMaterialAmbient;
        vec4 posInLightSpace = vPos;
        vec3 normalInLightSpace = normalize(vNormal);
        for (int i = 0;i < uLightCount;++i)
        {
            vec3 lv = normalize(uLightPos[i].w == 0.0 ? uLightPos[i].xyz : (uLightPos[i].xyz - posInLightSpace.xyz));
            
            float atten = (iAttenuationEnabled == 0) ? 1.0 : 1.0 / length(uLightPos[i].xyz - posInLightSpace.xyz);
            float density = 1.0;
            if (uDoubleSided != 0)
            {
            	density = abs(dot(normalInLightSpace, lv));
            }
            else
            {
                density = clamp(dot(normalInLightSpace, lv), 0.0, 1.0);
			}
            vDensity += density * atten;
            lightResult += vec4(uMaterialDiffuse.xyz * uLightColor[i].xyz * density, uMaterialDiffuse.w) * atten;
            
            // specular light
            if (uMaterialSpec.w > 0.01 && density > 0.0)
            {
                float specPower = 0.0;
                vec3 camVec = normalize(uEyePosition - posInLightSpace.xyz);
                vec3 halfV = normalize(lv + camVec);
                specPower = pow(max(0.0, dot(halfV, normalInLightSpace)), uShininess);
                lightResult += vec4(uMaterialSpec.xyz * normalize(uLightColor[i].xyz) * specPower, 0);
            }
        }
        lightResult = clamp(lightResult, 0.0, 1.0);
    }
    else
    {
    	lightResult = uMaterialDiffuse;
        vDensity = 1.0;
    }
    
    if (count == 0)
    {
    	if (uTextureMode == 0)
    	{
    		gl_FragColor = lightResult;
    	}
    	else
    	{
	        vec4 texColor = texture2D(tex, tc + uTexScroll);
	        vec4 baseColor = texColor * vDensity;
	        if (uTextureMode == 1)
	        {
	            gl_FragColor = baseColor + lightResult;
	        }
	        else if(uTextureMode == 2)
	        {
	            gl_FragColor = vec4(baseColor.xyz, texColor.w);
	        }
	        else
	        {
	            gl_FragColor = baseColor * lightResult;
	        }
	    }
    }
    else if (uIsOccluder != 0)
    {
        vec4 texColor = texture2D(tex, tc);
        vec4 baseColor = texColor * vDensity + lightResult;
        // self shadowing. avoid completely black
        gl_FragColor = vec4(baseColor.xyz * uShadowFactor, baseColor.w);
    }
    else
    {
        gl_FragColor = vec4(0.0, 0.0, 0.0, float(count) / float(shadowAASampleRate));
    }
}
